// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(in *jlexer.Lexer, out *GetRestaurantDishesCategoriesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "restName":
			out.Name = string(in.String())
		case "imgPath":
			out.ImagePath = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "minPrice":
			out.MinPrice = int(in.Int())
		case "rating":
			out.Rating = float64(in.Float64())
		case "timeToDeliver":
			out.TimeToDelivery = string(in.String())
		case "reviewCount":
			out.ReviewCount = int(in.Int())
		case "dishes":
			if in.IsNull() {
				in.Skip()
				out.Dishes = nil
			} else {
				in.Delim('[')
				if out.Dishes == nil {
					if !in.IsDelim(']') {
						out.Dishes = make([]DishCategoriesResp, 0, 0)
					} else {
						out.Dishes = []DishCategoriesResp{}
					}
				} else {
					out.Dishes = (out.Dishes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 DishCategoriesResp
					(v1).UnmarshalEasyJSON(in)
					out.Dishes = append(out.Dishes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]CategoriesDishesDelivery, 0, 1)
					} else {
						out.Categories = []CategoriesDishesDelivery{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v2 CategoriesDishesDelivery
					(v2).UnmarshalEasyJSON(in)
					out.Categories = append(out.Categories, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(out *jwriter.Writer, in GetRestaurantDishesCategoriesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"restName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"imgPath\":"
		out.RawString(prefix)
		out.String(string(in.ImagePath))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"minPrice\":"
		out.RawString(prefix)
		out.Int(int(in.MinPrice))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"timeToDeliver\":"
		out.RawString(prefix)
		out.String(string(in.TimeToDelivery))
	}
	{
		const prefix string = ",\"reviewCount\":"
		out.RawString(prefix)
		out.Int(int(in.ReviewCount))
	}
	{
		const prefix string = ",\"dishes\":"
		out.RawString(prefix)
		if in.Dishes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Dishes {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix)
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Categories {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetRestaurantDishesCategoriesResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetRestaurantDishesCategoriesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetRestaurantDishesCategoriesResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetRestaurantDishesCategoriesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(l, v)
}
func easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(in *jlexer.Lexer, out *DishCategoriesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "category":
			out.Category = int(in.Int())
		case "restaurant":
			out.RestaurantId = int(in.Int())
		case "productName":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "imgPath":
			out.ImagePath = string(in.String())
		case "info":
			out.Calories = int(in.Int())
		case "price":
			out.Price = int(in.Int())
		case "weight":
			out.Weight = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(out *jwriter.Writer, in DishCategoriesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.Int(int(in.Category))
	}
	{
		const prefix string = ",\"restaurant\":"
		out.RawString(prefix)
		out.Int(int(in.RestaurantId))
	}
	{
		const prefix string = ",\"productName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"imgPath\":"
		out.RawString(prefix)
		out.String(string(in.ImagePath))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.Int(int(in.Calories))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DishCategoriesResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DishCategoriesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DishCategoriesResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DishCategoriesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(l, v)
}
func easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(in *jlexer.Lexer, out *CategoriesDishesDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			out.Category = string(in.String())
		case "dishes":
			if in.IsNull() {
				in.Skip()
				out.Dishes = nil
			} else {
				in.Delim('[')
				if out.Dishes == nil {
					if !in.IsDelim(']') {
						out.Dishes = make([]int, 0, 8)
					} else {
						out.Dishes = []int{}
					}
				} else {
					out.Dishes = (out.Dishes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.Dishes = append(out.Dishes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(out *jwriter.Writer, in CategoriesDishesDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"dishes\":"
		out.RawString(prefix)
		if in.Dishes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Dishes {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoriesDishesDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoriesDishesDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCed86675EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoriesDishesDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoriesDishesDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCed86675DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(l, v)
}
