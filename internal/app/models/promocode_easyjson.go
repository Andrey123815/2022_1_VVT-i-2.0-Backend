// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson220a1030DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(in *jlexer.Lexer, out *PromocodeResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "img":
			out.Image = string(in.String())
		case "logo":
			out.LogoImage = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "promocode":
			out.Promocode = string(in.String())
		case "restName":
			out.RestaurantName = string(in.String())
		case "restSlug":
			out.RestaurantSlug = string(in.String())
		case "discount":
			out.Discount = float32(in.Float32())
		case "priceReduction":
			out.PriceReduction = int(in.Int())
		case "minPrice":
			out.MinPrice = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson220a1030EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(out *jwriter.Writer, in PromocodeResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"img\":"
		out.RawString(prefix[1:])
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		out.String(string(in.LogoImage))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"promocode\":"
		out.RawString(prefix)
		out.String(string(in.Promocode))
	}
	{
		const prefix string = ",\"restName\":"
		out.RawString(prefix)
		out.String(string(in.RestaurantName))
	}
	{
		const prefix string = ",\"restSlug\":"
		out.RawString(prefix)
		out.String(string(in.RestaurantSlug))
	}
	{
		const prefix string = ",\"discount\":"
		out.RawString(prefix)
		out.Float32(float32(in.Discount))
	}
	{
		const prefix string = ",\"priceReduction\":"
		out.RawString(prefix)
		out.Int(int(in.PriceReduction))
	}
	{
		const prefix string = ",\"minPrice\":"
		out.RawString(prefix)
		out.Int(int(in.MinPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromocodeResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson220a1030EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromocodeResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson220a1030EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromocodeResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson220a1030DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromocodeResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson220a1030DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(l, v)
}
func easyjson220a1030DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(in *jlexer.Lexer, out *GetPromocodesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "promos":
			if in.IsNull() {
				in.Skip()
				out.Promos = nil
			} else {
				in.Delim('[')
				if out.Promos == nil {
					if !in.IsDelim(']') {
						out.Promos = make([]PromocodeResp, 0, 0)
					} else {
						out.Promos = []PromocodeResp{}
					}
				} else {
					out.Promos = (out.Promos)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PromocodeResp
					(v1).UnmarshalEasyJSON(in)
					out.Promos = append(out.Promos, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson220a1030EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(out *jwriter.Writer, in GetPromocodesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"promos\":"
		out.RawString(prefix[1:])
		if in.Promos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Promos {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPromocodesResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson220a1030EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPromocodesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson220a1030EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPromocodesResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson220a1030DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPromocodesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson220a1030DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(l, v)
}
