// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(in *jlexer.Lexer, out *ShortOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderNumber":
			out.OrderId = int64(in.Int64())
		case "date":
			out.Date = string(in.String())
		case "totalPrice":
			out.TotalPrice = int64(in.Int64())
		case "restName":
			out.RestaurantName = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(out *jwriter.Writer, in ShortOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderNumber\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.OrderId))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"totalPrice\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalPrice))
	}
	{
		const prefix string = ",\"restName\":"
		out.RawString(prefix)
		out.String(string(in.RestaurantName))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShortOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShortOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShortOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShortOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(in *jlexer.Lexer, out *OrderStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.OrderId = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(out *jwriter.Writer, in OrderStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.OrderId))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels1(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(in *jlexer.Lexer, out *OrderReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "entrance":
			out.Entrance = string(in.String())
		case "intercom":
			out.Intercom = string(in.String())
		case "floor":
			out.Floor = string(in.String())
		case "flat":
			out.Flat = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "cart":
			if in.IsNull() {
				in.Skip()
				out.Cart = nil
			} else {
				in.Delim('[')
				if out.Cart == nil {
					if !in.IsDelim(']') {
						out.Cart = make([]OrderPosition, 0, 4)
					} else {
						out.Cart = []OrderPosition{}
					}
				} else {
					out.Cart = (out.Cart)[:0]
				}
				for !in.IsDelim(']') {
					var v1 OrderPosition
					(v1).UnmarshalEasyJSON(in)
					out.Cart = append(out.Cart, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "promocode":
			out.Promocode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(out *jwriter.Writer, in OrderReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"entrance\":"
		out.RawString(prefix)
		out.String(string(in.Entrance))
	}
	{
		const prefix string = ",\"intercom\":"
		out.RawString(prefix)
		out.String(string(in.Intercom))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.String(string(in.Floor))
	}
	{
		const prefix string = ",\"flat\":"
		out.RawString(prefix)
		out.String(string(in.Flat))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"cart\":"
		out.RawString(prefix)
		if in.Cart == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Cart {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"promocode\":"
		out.RawString(prefix)
		out.String(string(in.Promocode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels2(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels3(in *jlexer.Lexer, out *OrderPositionResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "count":
			out.Count = int64(in.Int64())
		case "price":
			out.Price = int64(in.Int64())
		case "calories":
			out.Calories = int64(in.Int64())
		case "weight":
			out.Weigth = int64(in.Int64())
		case "imgPath":
			out.ImagePath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels3(out *jwriter.Writer, in OrderPositionResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"calories\":"
		out.RawString(prefix)
		out.Int64(int64(in.Calories))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Int64(int64(in.Weigth))
	}
	{
		const prefix string = ",\"imgPath\":"
		out.RawString(prefix)
		out.String(string(in.ImagePath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderPositionResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderPositionResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderPositionResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderPositionResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels3(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels4(in *jlexer.Lexer, out *OrderPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "count":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels4(out *jwriter.Writer, in OrderPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels4(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels5(in *jlexer.Lexer, out *GetUserOrdersResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderList":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]ShortOrder, 0, 1)
					} else {
						out.Orders = []ShortOrder{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ShortOrder
					(v4).UnmarshalEasyJSON(in)
					out.Orders = append(out.Orders, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels5(out *jwriter.Writer, in GetUserOrdersResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderList\":"
		out.RawString(prefix[1:])
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Orders {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserOrdersResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserOrdersResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserOrdersResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserOrdersResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels5(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels6(in *jlexer.Lexer, out *GetUserOrderStatusesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statuses":
			if in.IsNull() {
				in.Skip()
				out.OrderStatuses = nil
			} else {
				in.Delim('[')
				if out.OrderStatuses == nil {
					if !in.IsDelim(']') {
						out.OrderStatuses = make([]OrderStatus, 0, 2)
					} else {
						out.OrderStatuses = []OrderStatus{}
					}
				} else {
					out.OrderStatuses = (out.OrderStatuses)[:0]
				}
				for !in.IsDelim(']') {
					var v7 OrderStatus
					(v7).UnmarshalEasyJSON(in)
					out.OrderStatuses = append(out.OrderStatuses, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels6(out *jwriter.Writer, in GetUserOrderStatusesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statuses\":"
		out.RawString(prefix[1:])
		if in.OrderStatuses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.OrderStatuses {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserOrderStatusesResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserOrderStatusesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserOrderStatusesResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserOrderStatusesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels6(l, v)
}
func easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels7(in *jlexer.Lexer, out *GetUserOrderResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderNumber":
			out.OrderId = int64(in.Int64())
		case "address":
			out.Address = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "totalPrice":
			out.TotalPrice = int64(in.Int64())
		case "summaryDiscount":
			out.Discount = int64(in.Int64())
		case "deliveryPrice":
			out.DeliveryPrice = int64(in.Int64())
		case "restName":
			out.RestaurantName = string(in.String())
		case "restSlug":
			out.RestaurantSlug = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "cart":
			if in.IsNull() {
				in.Skip()
				out.Cart = nil
			} else {
				in.Delim('[')
				if out.Cart == nil {
					if !in.IsDelim(']') {
						out.Cart = make([]OrderPositionResp, 0, 0)
					} else {
						out.Cart = []OrderPositionResp{}
					}
				} else {
					out.Cart = (out.Cart)[:0]
				}
				for !in.IsDelim(']') {
					var v10 OrderPositionResp
					(v10).UnmarshalEasyJSON(in)
					out.Cart = append(out.Cart, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels7(out *jwriter.Writer, in GetUserOrderResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderNumber\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.OrderId))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"totalPrice\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalPrice))
	}
	{
		const prefix string = ",\"summaryDiscount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Discount))
	}
	{
		const prefix string = ",\"deliveryPrice\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeliveryPrice))
	}
	{
		const prefix string = ",\"restName\":"
		out.RawString(prefix)
		out.String(string(in.RestaurantName))
	}
	{
		const prefix string = ",\"restSlug\":"
		out.RawString(prefix)
		out.String(string(in.RestaurantSlug))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"cart\":"
		out.RawString(prefix)
		if in.Cart == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Cart {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserOrderResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserOrderResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComGoParkMailRu20221VVTI20InternalAppModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserOrderResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserOrderResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComGoParkMailRu20221VVTI20InternalAppModels7(l, v)
}
